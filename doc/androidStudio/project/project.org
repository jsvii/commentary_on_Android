#+TITLE: Android project

* 模块

模块是源文件和编译设置的集合，可让您将项目划分为独立的功能单元。您的项目可以包含一个或多个模块，一个模块可以将另一个模块作为依赖项。每个模块都可以单独编译、测试和调试。

其他模块通常适用于以下情形：在您自己的项目中创建代码库时，或者您希望为不同设备类型（例如手机和穿戴式设备）创建不同的代码和资源集，但将所有文件都限定在同一个项目中并共享一些代码时。

要向您的项目中添加新模块，只需依次点击 File > New > New Module 即可。

Android Studio 提供了几种不同类型的模块：

** Android 应用模块

该模块为应用的源代码、资源文件和应用级设置（例如模块级构建文件和 Android 清单文件）提供容器。当您创建新项目时，默认的模块名称是“app”。

在 Create New Module 窗口中，Android Studio 提供了以下类型的应用模块：

1. 手机和平板电脑模块

1. Wear OS 模块

1. Android TV 模块

1. Glass 模块

其中每个模块都提供适合相应应用或设备类型的基本文件和一些代码模板。

如需详细了解如何添加模块，请参阅为新设备添加模块。

** 功能模块

该模块表示应用中可利用 Play Feature Delivery 的模块化功能。例如，借助功能模块，您可以为用户按需提供应用的某些功能或通过 Google Play 免安装体验为用户提供免安装体验。
如需了解详情，请参阅添加对 Play Feature Delivery 的支持。

** 库模块

该模块为可重用代码提供容器，您可以将其作为依赖项用在其他应用模块中或将其导入其他项目中。从结构上讲，库模块与应用模块相同，但在构建时，前者会创建代码归档文件而不是APK，因此它无法安装在设备上。

在 Create New Module 窗口中，Android Studio 提供了以下库模块：

1. Android 库：这种类型的库可以包含 Android 项目中支持的所有文件类型，包括源代码、资源和清单文件。构建结果是一个 Android ARchive (AAR) 文件，您可以将其添加为 Android 应用模块的依赖项。

1. Java 库：这种类型的库只能包含 Java 源文件。构建结果是一个 Java Archive (JAR) 文件，您可以将其添加为 Android 应用模块或其他 Java 项目的依赖项。

** Google Cloud 模块

该模块为您的 Google Cloud 后端代码提供容器。该模块具有 Java App Engine 后端所需的代码和依赖项，该后端使用简单的 HTTP、Cloud Endpoints 和 Cloud Messaging 连接到您的应用。您可以开发后端以提供您的应用所需的云服务。

使用 Android Studio 开发 Google Cloud 模块，您可以在同一个项目中管理应用代码和后端代码。您还可以在本地运行和测试后端代码，并使用 Android Studio 部署您的 Google Cloud 模块。

如需详细了解如何运行和部署 Google Cloud 模块，请参阅运行、测试和部署后端。

有些人还将模块称为子项目，这没关系，因为 Gradle 也将模块称为项目。例如，当您创建库模块并想将它作为依赖项添加到 Android 应用模块中时，您必须按如下方式进行声明：


#+BEGIN_SRC groovy
dependencies {
  compile project(':my-library-module')
}
#+END_SRC


* 项目文件

默认情况下，Android Studio 会在 Android 视图中显示您的项目文件。此视图并不能反映磁盘上的实际文件层次结构，而是按模块和文件类型进行整理，以简化项目的关键源文件之间的导航方式，并隐藏某些不常用的文件或目录。与磁盘上的结构相比，一些结构变化包括以下方面：

1. 在顶级 Gradle Script 组中显示相应项目的所有与构建相关的配置文件。

1. 在模块级组中显示每个模块的所有清单文件（当您针对不同的产品变种和构建类型使用不同的清单文件时）。

1. 在一个组（而非在每个资源限定符的单独文件夹）中显示所有备用资源文件。例如，您的启动器图标的所有密度版本都可以并排显示。

在每个 Android 应用模块中，文件显示在以下组中：

#+BEGIN_COMMENT
以android视图看
#+END_COMMENT

1. manifests 包含 AndroidManifest.xml 文件。

1. java 包含 Java 源代码文件（以软件包名称分隔各文件，包括 JUnit 测试代码）。

1. res 包含所有非代码资源（例如 XML 布局、界面字符串和位图图像），这些资源划分到相应的子目录中。如需详细了解所有可能的资源类型，请参阅提供资源。

1. Manifests Folder

1. Java Folder

1. res (Resources) Folder

  - Drawable Folder

  - Layout Folder

  - Mipmap Folder

  - Values Folder

1. Gradle Scripts
