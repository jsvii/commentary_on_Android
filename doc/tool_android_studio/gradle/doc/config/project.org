* project

** demo

#+BEGIN_SRC java
package org.gradle.api;

public interface Project extends Comparable<Project>, ExtensionAware, PluginAware {
    String DEFAULT_BUILD_FILE = "build.gradle";
    String PATH_SEPARATOR = ":";
    String DEFAULT_BUILD_DIR_NAME = "build";
    String GRADLE_PROPERTIES = "gradle.properties";
    String SYSTEM_PROP_PREFIX = "systemProp";
    String DEFAULT_VERSION = "unspecified";
    String DEFAULT_STATUS = "release";

    Project getRootProject();

    File getRootDir();

    File getBuildDir();

    void setBuildDir(File var1);

    void setBuildDir(Object var1);

    File getBuildFile();

    @Nullable
    Project getParent();

    String getName();

    String getDisplayName();

    @Nullable
    String getDescription();

    void setDescription(@Nullable String var1);

    Object getGroup();

    void setGroup(Object var1);

    Object getVersion();

    void setVersion(Object var1);

    Object getStatus();

    void setStatus(Object var1);

    Map<String, Project> getChildProjects();

    void setProperty(String var1, Object var2) throws MissingPropertyException;

    Project getProject();

    Set<Project> getAllprojects();

    Set<Project> getSubprojects();

    Task task(String var1) throws InvalidUserDataException;

    Task task(Map<String, ?> var1, String var2) throws InvalidUserDataException;

    Task task(Map<String, ?> var1, String var2, Closure var3);

    Task task(String var1, Closure var2);

    String getPath();

    List<String> getDefaultTasks();

    void setDefaultTasks(List<String> var1);

    void defaultTasks(String... var1);

    Project evaluationDependsOn(String var1) throws UnknownProjectException;

    void evaluationDependsOnChildren();

    @Nullable
    Project findProject(String var1);

    Project project(String var1) throws UnknownProjectException;

    Project project(String var1, Closure var2);

    Project project(String var1, Action<? super Project> var2);

    Map<Project, Set<Task>> getAllTasks(boolean var1);

    Set<Task> getTasksByName(String var1, boolean var2);

    File getProjectDir();

    File file(Object var1);

    File file(Object var1, PathValidation var2) throws InvalidUserDataException;

    URI uri(Object var1);

    String relativePath(Object var1);

    ConfigurableFileCollection files(Object... var1);

    ConfigurableFileCollection files(Object var1, Closure var2);

    ConfigurableFileCollection files(Object var1, Action<? super ConfigurableFileCollection> var2);

    ConfigurableFileTree fileTree(Object var1);

    ConfigurableFileTree fileTree(Object var1, Closure var2);

    ConfigurableFileTree fileTree(Object var1, Action<? super ConfigurableFileTree> var2);

    ConfigurableFileTree fileTree(Map<String, ?> var1);

    FileTree zipTree(Object var1);

    FileTree tarTree(Object var1);

    @Incubating
    <T> Provider<T> provider(Callable<T> var1);

    /** @deprecated */
    @Incubating
    @Deprecated
    <T> PropertyState<T> property(Class<T> var1);

    @Incubating
    ProviderFactory getProviders();

    @Incubating
    ObjectFactory getObjects();

    @Incubating
    ProjectLayout getLayout();

    File mkdir(Object var1);

    boolean delete(Object... var1);

    WorkResult delete(Action<? super DeleteSpec> var1);

    ExecResult javaexec(Closure var1);

    ExecResult javaexec(Action<? super JavaExecSpec> var1);

    ExecResult exec(Closure var1);

    ExecResult exec(Action<? super ExecSpec> var1);

    String absoluteProjectPath(String var1);

    String relativeProjectPath(String var1);

    AntBuilder getAnt();

    AntBuilder createAntBuilder();

    AntBuilder ant(Closure var1);

    AntBuilder ant(Action<? super AntBuilder> var1);

    ConfigurationContainer getConfigurations();

    void configurations(Closure var1);

    ArtifactHandler getArtifacts();

    void artifacts(Closure var1);

    void artifacts(Action<? super ArtifactHandler> var1);

    Convention getConvention();

    int depthCompare(Project var1);

    int getDepth();

    TaskContainer getTasks();

    void subprojects(Action<? super Project> var1);

    void subprojects(Closure var1);

    void allprojects(Action<? super Project> var1);

    void allprojects(Closure var1);

    void beforeEvaluate(Action<? super Project> var1);

    void afterEvaluate(Action<? super Project> var1);

    void beforeEvaluate(Closure var1);

    void afterEvaluate(Closure var1);

    boolean hasProperty(String var1);

    Map<String, ?> getProperties();

    @Nullable
    Object property(String var1) throws MissingPropertyException;

    @Incubating
    @Nullable
    Object findProperty(String var1);

    Logger getLogger();

    Gradle getGradle();

    LoggingManager getLogging();

    Object configure(Object var1, Closure var2);

    Iterable<?> configure(Iterable<?> var1, Closure var2);

    <T> Iterable<T> configure(Iterable<T> var1, Action<? super T> var2);

    RepositoryHandler getRepositories();

    void repositories(Closure var1);

    DependencyHandler getDependencies();

    void dependencies(Closure var1);

    ScriptHandler getBuildscript();

    void buildscript(Closure var1);

    WorkResult copy(Closure var1);

    WorkResult copy(Action<? super CopySpec> var1);

    CopySpec copySpec(Closure var1);

    CopySpec copySpec(Action<? super CopySpec> var1);

    CopySpec copySpec();

    WorkResult sync(Action<? super CopySpec> var1);

    ProjectState getState();

    <T> NamedDomainObjectContainer<T> container(Class<T> var1);

    <T> NamedDomainObjectContainer<T> container(Class<T> var1, NamedDomainObjectFactory<T> var2);

    <T> NamedDomainObjectContainer<T> container(Class<T> var1, Closure var2);

    ExtensionContainer getExtensions();

    ResourceHandler getResources();

    @Incubating
    SoftwareComponentContainer getComponents();

    @Incubating
    InputNormalizationHandler getNormalization();

    @Incubating
    void normalization(Action<? super InputNormalizationHandler> var1);
}
#+ENG_SRC
